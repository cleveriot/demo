import os
import openai
import tiktoken

openai.api_key = os.getenv("OPENAI_API_KEY")

def get_sentiment(msg):
    """
    Get the sentiment from a text message
    
    parameters:
    msg (string): The text message

    returns:
    sentiment (string): The sentiment detected in the message
    """
    response = openai.Completion.create(
    model="text-davinci-003",
    prompt="Classify the sentiment in this messge: {}".format(msg),
    temperature=0,
    max_tokens=60,
    top_p=1.0,
    frequency_penalty=0.0,
    presence_penalty=0.0
    )

    # Transform response in dict
    r_dict = response.to_dict()

    # Get only the 'text' value
    sentiment = r_dict.get('choices')[0].get('text').replace('\n','')

    return sentiment


def write_feedback(msg):
    """
    Write a message to answer a given site feedback
    
    parameters:
    msg (string): The text message

    returns:
    feedback (string): The feedback message to post
    """
    response = openai.Completion.create(
    model="text-davinci-003",
    prompt="Evaluate the sentiment and the message idiom and reply with a kindly message with a follow-up question if the sentiment is negative. If positive, just reply  only with a kindly message: {}".format(msg),
    temperature=0,
    max_tokens=180,
    top_p=1.0,
    frequency_penalty=0.0,
    presence_penalty=0.0
    )

    # Transform response in dict
    r_dict = response.to_dict()

    # Get only the 'text' value
    feedback = r_dict.get('choices')[0].get('text').replace('\n','')

    return feedback


def summarize(text):
    """
    Summarizes the provided text using the text-davinci-003 language model from OpenAI.

    Args:
    text (str): The text to be summarized.

    Returns:
    response (object): The response object containing the summary generated by the model.
    """
    tokens = get_tokens(text)
    print("Tokens: {}".format(tokens.nb_tokens))
    response = openai.Completion.create(
    model="text-davinci-003",
    prompt=f"Sumariza a reclamação a seguir para um responsável da qualidade do atendimento. Se houver menção da qualidade do atendimento customer care, também referir : {text} ",
    temperature=1,
    max_tokens=tokens.nb_tokens,
      top_p=1.0,
    frequency_penalty=0.0,
    presence_penalty=0.0
    )
    return response


def get_tokens(text,enc_name="p50k_base"):
    """
    Returns a class object containing information about the tokens generated from the provided text.

    Args:
    text (str): The text for which tokens will be generated.
    enc_name (str, optional): The name of the encoding scheme to be used. Defaults to "p50k_base".

    Returns:
    token_class (object): A class object containing information about the generated tokens.
    """
    encoding = tiktoken.get_encoding(enc_name)
    token_integers = encoding.encode(text)
    nb_tokens = len(token_integers)
    token_bytes = [encoding.decode_single_token_bytes(token) for token in token_integers]
    tokens = {"nb_tokens": nb_tokens, "token_bytes": token_bytes, "token_integers": token_integers}
    token_class = type("tokens", (), tokens)

    return token_class

